<?php
    !function_exists('profiler_v2') ? require_once('libraries/profiler/profiler.inc') : FALSE;
    profiler_v2('mooc');

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function mooc_install() {
  // Enable some mooc blocks.
  $default_theme = 'chamfer';
  $admin_theme = 'rubik';
  // disable all themes
  db_update('system')
    ->fields(array('status' => 0))
    ->condition('type', 'theme')
    ->execute();
  // enable $default_theme 
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', $default_theme)
    ->execute();
  // enable $admin_theme
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', $admin_theme)
    ->execute();
  variable_set('admin_theme', $admin_theme);
  
  // activate admin theme when editing a node
  variable_set('node_admin_theme', '1');
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
  );
  // drop system / user blocks to ensure correct building
  db_delete('block')->condition('module', 'system')->execute();
  db_delete('block')->condition('module', 'user')->execute();
  // add in our blocks defined above
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Page'),
      'base' => 'node_content',
      'description' => st("Use <em>pages</em> for your course content."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Default "Page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));

  // Don't display date and author information for "Page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture defaults
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');
  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
  // revert features to ensure they are all installed
  $features = array(    
    'feeds_node_helper_import',
    'node_reference_highlight_glossary',
    'mooc_ux_defaults',
    'mooc_perms',
    'mooc_helper',
    'textbook_editor',
    'mooc_textbook',
    'textbook_templates',
    'cis_section',
  );
  features_revert($features);
  // drop the "book" content type as its confusing
  node_type_delete('book');
  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 7;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);
	
  // clean up for regions conflict w/ install routine
  // anonymous users
	db_merge('role_permission')->key(array(
		'rid' => 1,
		'permission' => 'view regions_right_slideout region',
	))->fields(array(
		'module' => 'regions',
	))->execute();
	// auth users
	db_merge('role_permission')->key(array(
		'rid' => 2,
		'permission' => 'view regions_right_slideout region',
	))->fields(array(
		'module' => 'regions',
	))->execute();
	// stupid work around for regions conflict with module perms
  $roles = array('teaching assistant', 'instructor', 'administrator', 'staff');
  foreach ($roles as $name) {
    $role = user_role_load_by_name($name);
    db_merge('role_permission')->key(array(
        'rid' => $role->rid,
        'permission' => 'view regions_admin_left region',
    ))->fields(array(
        'module' => 'regions',
    ))->execute();
  }
	drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
  
  // set admin menu client side cache to off for performance reasons
  variable_set('admin_menu_cache_client', FALSE);
  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
  menu_rebuild();
  // ignore any rebuild messages as we have no content
  node_access_needs_rebuild(FALSE);
  // ignore any other install messages
  drupal_get_messages();
}
