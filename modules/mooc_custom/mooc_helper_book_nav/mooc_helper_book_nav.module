<?php
/**
 * @file
 * Book navigation defaults and overrides.
 */

/**
 * Implements hook_node_view().
 */
function mooc_helper_book_nav_node_view($node, $view_mode, $langcode) {
  // ensure this only happens for node's viewed in books
  if (arg(0) == 'node' && $view_mode == 'full' && isset($node->book) && isset($node->body) && empty($node->body['und'][0]['value'])) {
    $next = book_next($node->book);
    // ensure we have a next item and it's in this one
    if ($next && $node->book['mlid'] == $next['plid']) {
      if (entity_access('update', 'node', $node)) {
        drupal_set_message(t('This page is empty, so students will automatically be taken to the next page. You have not been since you can edit this content.'));
      }
      else {
        drupal_goto($next['link_path']);
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function mooc_helper_book_nav_block_info() {
  // provide block for rendering siblings in a line of the current page
  $blocks['book_sibling_nav'] = array(
    'info' => t('Book breadcrumb navigation'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mooc_helper_book_nav_block_view($delta = '') {
  $block = array();
  // @todo utilize static and book_cache cache bin methods to optimize
  // this is a ton of processing currently
  switch ($delta) {
    case 'book_sibling_nav':
      $block['subject'] = '';
      // if we have nothing, default back to at least the map
      $block['content'] = '<a href="#" class="mooc-helper-toc etb-modal-icon courses-icon"  data-reveal-id="block-mooc-helper-mooc-helper-toc-nav-modal" aria-controls="toc-drop" aria-expanded="false" title="Table of Contents">
                <div class="mooc-helper-toc-icon icon-courses-black etb-modal-icons"></div>
              </a>';
      $next_title = t('>');
      $prev_title = t('<');
      // load the node in scope globally at the moment and ensure we have one
      $globalnode = menu_get_object();
      if ($globalnode && !empty($globalnode->book) && $globalnode->book['plid'] != 0) {
        $breadcrumbs = array();
        $count = 0;
        $nav_count = 0;
        // loop through and generate a per level listing of all items
        $children = array();
        $parents = array();
        // get the parent of the current page
        $tmp = $globalnode->book;
        // if this has children, load 1 so we have that data for below
        if ($tmp['has_children'] && $globalnode->type != 'mooc_container') {
          // load all items that share the same parent as the current item
          $results = db_select('menu_links', 'ml')
            ->fields('ml')
            ->condition('plid', $tmp['mlid'], '=')
            ->orderBy('weight', 'ASC')
            ->execute()
            ->fetchAll();
          // associate the items that are siblings of the same parent
          foreach ($results as $item) {
            $children[-1][] = (array)$item;
          }
          $tmp2 = $tmp;
          $bid = explode('-', $tmp2['menu_name']);
          $tmp2['bid'] = $bid[2];
          $tmp2['mlid'] = -1;
          $tmp2['link_path'] = '';
          $tmp2['link_title'] = t('...');
          $tmp2['_class'] = 'book-parent-tree';
          $parents[-1] = $tmp2;
        }

        // keep tapping parents up the tree til we hit the end
        while ($tmp['plid'] != 0) {
          // load all items that share the same parent as the current item
          $results = db_select('menu_links', 'ml')
            ->fields('ml')
            ->condition('plid', $tmp['plid'], '=')
            ->orderBy('weight', 'ASC')
            ->execute()
            ->fetchAll();
          // associate the items that are siblings of the same parent
          foreach ($results as $item) {
            $children[$tmp['plid']][] = (array)$item;
          }
          // load the parent of the current item
          $cache = _book_cache_get_associations($tmp);
          // set next / prev relative to the globalnode
          if (!isset($next_url)) {
            $next_url = url($cache['next']['link_path']);
            $prev_url = url($cache['prev']['link_path']);
          }
          $parents[$tmp['plid']] = $tmp;
          $tmp = $cache['parent'];
        }
        // ensure we have results to style
        if (!empty($children)) {
          $firstlevel = TRUE;
          $icons = TRUE;
          // loop through the menu items associated to each menu parent
          foreach($children as $mlid => $menu_items) {
            $items = array();
            // loop through each menu item and build the menu item out
            foreach ($menu_items as $menu_item) {
              // default is a page icon
              $icon = NULL;
              // allow for modification of the book item icon to match mooc / FA
              $ml = $menu_item;
              // support for token replacement
              if (module_exists('token')) {
                $ml['link_path'] = token_replace($ml['link_path']);
              }
              // only perform icon look up for lowest level
              if ($firstlevel && $ml['has_children']) {
                $icons = FALSE;
              }
              // see if current item is the parent item, set to same compiled result if it is
              if (isset($parents[$menu_item['plid']]) && $parents[$menu_item['plid']]['mlid'] == $menu_item['mlid']) {
                $parents[$menu_item['plid']] = $ml;
                $parents[$menu_item['plid']]['_class'] = 'book-parent-tree';
                // see if the active global is this parent item
                if ($menu_item['mlid'] == $globalnode->book['mlid']) {
                  $parents[$menu_item['plid']]['_class'] .= ' active';
                }
              }
              // send compiled menu link off to theme engine for rendering
              $items[] = $ml;
            }
            // need to dump icons because something had children at this level
            if ($firstlevel && $icons) {
              foreach ($items as &$item) {
                $icon = 'page';
                // support for foundation access icon
                if (isset($item['options'])) {
                  $tmp = unserialize($item['options']);
                  if (isset($tmp['fa_icon'])) {
                    $icon = $tmp['fa_icon'];
                  }
                }
                $count++;
                $item['_count'] = $count;
                $item['_icon'] = $icon;
                if (isset($parents[$item['plid']]) && $parents[$item['plid']]['mlid'] == $item['mlid']) {
                  $parents[$item['plid']] = $item;
                  $parents[$item['plid']]['_class'] = 'book-parent-tree';
                  // see if the active global is this parent item
                  if ($item['mlid'] == $globalnode->book['mlid']) {
                    $parents[$item['plid']]['_class'] .= ' active';
                  }
                }
              }
            }
            $nav_count++;
            $firstlevel = FALSE;
            $breadcrumbs[] = theme('book_sibling_nav', array('parent' => $parents[$mlid] ,'items' => $items, 'count' => $nav_count));
          }
          // reverse the items cause they load the opposite order of rendering
          // since it goes backwards up the tree
          $breadcrumbs[] = '<a href="#" class="mooc-helper-toc etb-modal-icon courses-icon"  data-reveal-id="block-mooc-helper-mooc-helper-toc-nav-modal" aria-controls="toc-drop" aria-expanded="false" title="Table of Contents">
                <div class="mooc-helper-toc-icon icon-courses-black etb-modal-icons"></div>
              </a>';
          $breadcrumbs = array_reverse($breadcrumbs);
          // support for mooc_containers
          if ($globalnode->type == 'mooc_container' && isset($globalnode->field_mooc_container_type['und'][0]['value'])) {
            if ($globalnode->field_mooc_container_type['und'][0]['value'] == 'index') {
              $next_title = '';
              $next_url = '';
              $prev_title = '';
              $prev_url = '';
            }
          }
          $vars = array(
            'breadcrumbs' => $breadcrumbs,
            'next_url' => $next_url,
            'next_title' => $next_title,
            'prev_url' => $prev_url,
            'prev_title' => $prev_title,
            'count' => $nav_count,
          );
          // output contents by passing through the wrapper theme function
          $block['content'] = theme('book_sibling_nav_wrapper', $vars);
        }
      }
    break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function mooc_helper_book_nav_theme() {
  return array(
    'book_sibling_nav' => array(
      'variables' => array(
        'parent' => array(),
        'items' => array(),
        'count' => 1,
      ),
      'render element' => 'element',
      'template' => 'templates/book-sibling-nav',
    ),
    'book_sibling_nav_wrapper' => array(
      'variables' => array(
        'breadcrumbs' => array(),
        'next_url' => NULL,
        'next_title' => t('Next'),
        'prev_url' => NULL,
        'prev_title' => t('Previous'),
        'count' => 1,
      ),
      'render element' => 'element',
      'template' => 'templates/book-sibling-nav-wrapper',
    ),
  );
}

