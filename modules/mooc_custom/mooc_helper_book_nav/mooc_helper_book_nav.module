<?php
/**
 * @file
 * Book navigation defaults and overrides.
 */

/**
 * Implements hook_node_view().
 */
function mooc_helper_book_nav_node_view($node, $view_mode, $langcode) {
  // ensure this only happens for node's viewed in books
  if (arg(0) == 'node' && $view_mode == 'full' && isset($node->book) && isset($node->body) && empty($node->body['und'][0]['value'])) {
    $next = book_next($node->book);
    // ensure we have a next item and it's in this one
    if ($next && $node->book['mlid'] == $next['plid']) {
      if (entity_access('update', 'node', $node)) {
        drupal_set_message(t('This page is empty, so students will automatically be taken to the next page. You have not been since you can edit this content.'));
      }
      else {
        drupal_goto($next['link_path']);
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function mooc_helper_book_nav_block_info() {
  // provide block for rendering siblings in a line of the current page
  $blocks['book_sibling_nav'] = array(
    'info' => t('Book below level navigation'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mooc_helper_book_nav_block_view($delta = '') {
  $block = array();
  // @todo utilize static and book_cache cache bin methods to optimize
  // this is a ton of processing currently
  switch ($delta) {
    case 'book_sibling_nav':
      $block['subject'] = '';
      // load the node in scope globally at the moment and ensure we have one
      $globalnode = menu_get_object();
      if ($globalnode && !empty($globalnode->book) && $globalnode->book['plid'] != 0) {
        $nids = array();
        // load all nodes that share the same parent as the current node
        $results = db_select('menu_links', 'ml')
          ->fields('ml', array('link_path'))
          ->condition('menu_name', 'book-toc-' . $globalnode->book['bid'] , '=')
          ->condition('plid', $globalnode->book['mlid'], '=')
          ->orderBy('weight', 'ASC')
          ->execute()
          ->fetchAll();
        // if we have no children, then shoot for siblings instead
        if (empty($results)) {
          $results = db_select('menu_links', 'ml')
          ->fields('ml', array('link_path'))
          ->condition('menu_name', 'book-toc-' . $globalnode->book['bid'] , '=')
          ->condition('plid', $globalnode->book['plid'], '=')
          ->orderBy('weight', 'ASC')
          ->execute()
          ->fetchAll();
        }
        // convert menu associations into node ids
        foreach ($results as $item) {
          $nids[] = str_replace('node/', '', $item->link_path);
        }
        // ensure we have results to style
        if (!empty($nids)) {
          // load all nodes
          $nodes = entity_load('node', $nids);
          // load the associations to other items from cache if we have it
          $data = _book_cache_get_associations($globalnode->book);
          $items = array();
          $active = 'past-page';
          $count = 0;
          // loop through each node and build the menu item out
          foreach ($nodes as $node) {
            $count++;
            // default is a page icon
            $icon = 'page';
            // allow for modification of the book item icon to match mooc / FA
            $ml = $node->book;
            $ml['#href'] = $node->book['link_path'];
            drupal_alter('foundation_access_menu_item_icon', $icon, $ml);
            // we are passing in the page they are currently on so disable active
            if ($node->nid == $globalnode->nid) {
              $active = 'current-page';
            }
            $print_title = FALSE;
            $children = array();
            // structure results as a single item for easy theming
            if ($node->book['has_children']) {
              $icon = 'content-outline';
              // @todo set this to TRUE once we style appropriately
              $print_title = TRUE;
              $children = book_children($node->book);
            }

            $items[] = array(
              'count' => $count,
              'nid' => $node->nid,
              'mlid' => $node->book['mlid'],
              'title' => token_replace($node->book['link_title'], array('node' => $node)),
              'icon' => $icon,
              'active' => $active,
              'print-title' => $print_title,
              'tree' => $children,
            );

            // we are passing in the page they are currently on so disable active
            if ($node->nid == $globalnode->nid) {
              $active = 'future-page';
            }
          }
          $block['content'] = theme('book_sibling_nav', array('items' => $items));
        }
      }
    break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function mooc_helper_book_nav_theme() {
  return array(
    'book_sibling_nav' => array(
      'variables' => array(
        'items' => array(),
      ),
      'render element' => 'element',
      'template' => 'templates/book-sibling-nav',
    ),
  );
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function mooc_helper_book_nav_menu_breadcrumb_alter(&$active_trail, $item) {
  // only do this in the node structure
  if (arg(0) == 'node') {
    // pop off home
    array_shift($active_trail);
    array_shift($active_trail);
    // add the current page item if it has children so we can get to them
    if (isset($item['page_arguments'][2]->book) && $item['page_arguments'][2]->book['has_children']) {
      $active_trail[] = $item['page_arguments'][2]->book;
    }
  }
}
