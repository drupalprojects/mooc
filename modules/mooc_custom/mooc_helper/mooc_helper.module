<?php
/**
 * @file
 * Code for the MOOC Helper feature.
 */

include_once 'mooc_helper.features.inc';

/**
 * Implements hook_preprocess().
 *
 * Add a class to match our view-modes
 */
function mooc_helper_preprocess(&$variables, $hook) {
  if ($hook == 'node') {
    $variables['classes_array'][] = $hook . '-view-mode-' . $variables['view_mode'];
  }
}

/**
 * Implements hook_menu_contextual_links_alter().
 */
function mooc_helper_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  // Add a link to all contextual links for nodes.
  if ($root_path == 'node/%') {
    unset($links['cis_lmsless-delete']);
    $entity_id = array_pop(explode('/', $router_item['href']));
    // link to print the outline
    $links['cis_lmsless_print_outline'] = array(
      'title' => t('Print'),
      'href' => 'book/export/html/' . $entity_id,
      'localized_options' => array(),
    );
    // outline below here
    $links['cis_lmsless_outline_designer'] = array(
      'title' => t('Outline'),
      'href' => 'node/' . $entity_id . '/outline/children',
      'localized_options' => array(),
    );
    // duplicate this part
    $links['cis_lmsless_duplicate_outline'] = array(
      'title' => t('Duplicate'),
      'href' => 'node/' . $entity_id . '/outline/copy',
      'localized_options' => array(),
    );
  }
}

/**
 * Implements hook_menu().
 */
function mooc_helper_menu() {
  $items = array();
  // Callback to load correct instructional outline
  $items['inst-outline'] = array(
    'title' => 'Instructional outline',
    'page callback' => '_cis_connector_transaction',
    'page arguments' => array(0),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Return a list of all book roots as an array
 *
 * @param $property
 *   property to use as the unique key, defaults to uuid.
 * @param $title
 *   (optional) property to use as the title field in array.
 * @return $outlines
 *   an array of outlines keyed as property => title
 */
function _mooc_helper_all_book_outlines($property = 'uuid', $title = '') {
  $outlines = array();
  // load all book outline etids
  foreach (book_get_books() as $book_id => $book) {
    // load book node fully
    $node = node_load($book['nid']);
    if ($title == '') {
      $set_title = $node->book['link_title'];
    }
    else {
      $set_title = $node->{$title};
    }
    // create an array
    $outlines[$node->{$property}] = $set_title;
  }
  return $outlines;
}

/**
 * Implements hook_node_presave().
 */
function mooc_helper_node_presave($node) {
  // make sure there's an outline associated to this
  // but only if we have at least 1 to do so with
  if ($node->type == 'section') {
    // ensure an outline is set, if not use default
    if (empty($node->field_instructional_outlines['und'])) {
      $default = variable_get('mooc_default_outline', '');
      // edge case, default was never set
      if ($default == '') {
        // load all books
        $books = _mooc_helper_all_book_outlines('nid', 'created');
        // make sure we at least have some books in here
        if (is_array($books)) {
          // move to 1st array position in iterator
          reset($books);
          // sort maintaining index which is the nid
          asort($books);
          // set default to first key in array
          $default = key($books);
        }
      }
      // make sure we have something to set
      if ($default != '') {
        $node->field_instructional_outlines['und'][0]['target_id'] = $default;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mooc_helper_form_cis_service_connection_ux_form_alter(&$form, &$form_state, $form_id) {
  $form['site_information']['mooc_default_outline'] = array(
    '#description' => t('This is the default content outline for new sections that register.'),
    '#default_value' => variable_get('mooc_default_outline', ''),
    '#weight' => '0',
    '#title' => t('Default content outline'),
    '#type' => 'select',
    '#required' => '1',
    '#options' => _mooc_helper_all_book_outlines('nid'),
  );
}

/**
 * Implements hook_tokens($type, $tokens, array $data = array(), array $options = array().
 */
function mooc_helper_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  // tokens from section
  if ($type == 'elmsln_section') {
    $outline_node = _cis_service_connection_active_outline();
    $section = _cis_connector_section_context();
    foreach ($tokens as $name => $original) {
      // elements we know about ahead of time
      switch ($name) {
        case 'active_outline_nid':
          $replacements[$original] = $outline_node->nid;
          $replacements[$original] = '<span data-cis-token="' . t('Scope: Current section') . '<br/>' . t('Token: @token', array('@token' => strip_tags($original))) . '"  class="cis_token_dynamic_value">' . $replacements[$original] . '</span>';
        break;
      }
    }
  }
  if ($type == 'elmsln_section_data') {
    $outline_node = _cis_service_connection_active_outline();
    $section = _cis_connector_section_context();
    foreach ($tokens as $name => $original) {
      // elements we know about ahead of time
      switch ($name) {
        case 'active_outline_nid':
          if (isset($outline_node->nid)) {
            $replacements[$original] = $outline_node->nid;
          }
        break;
      }
    }
  }

  return $replacements;
}

/**
 * Provide information about our custom tokens.
 *
 * @see http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_token_info/7
 * @see http://www.benmarshall.me/drupal-custom-tokens
 * @return array
 *   An associative array of available tokens and token types.
 */
function mooc_helper_token_info() {
  // provide feedback about the active outline nid token
  $outline_node = _cis_service_connection_active_outline();
  $tokens = array(
    'elmsln_section' => array(
      'active_outline_nid' => array(
        'name' => t("Active content outline"),
        'description' => t('Section based token whose value is currently @val, just the value.', array('@val' => $outline_node->nid)),
      ),
    ),
  );
  // mirror this info for the data section that applies without scope wrappers
  $tokens['elmsln_section_data'] = $tokens['elmsln_section'];

  return array(
    'tokens' => $tokens,
  );
}
